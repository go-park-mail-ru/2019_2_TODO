// Code generated by MockGen. DO NOT EDIT.
// Source: handlers.go

// Package user is a generated GoMock package.
package main

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserCRUD is a mock of UserCRUD interface
type MockUserCRUD struct {
	ctrl     *gomock.Controller
	recorder *MockUserCRUDMockRecorder
}

// MockUserCRUDMockRecorder is the mock recorder for MockUserCRUD
type MockUserCRUDMockRecorder struct {
	mock *MockUserCRUD
}

// NewMockUserCRUD creates a new mock instance
func NewMockUserCRUD(ctrl *gomock.Controller) *MockUserCRUD {
	mock := &MockUserCRUD{ctrl: ctrl}
	mock.recorder = &MockUserCRUDMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserCRUD) EXPECT() *MockUserCRUDMockRecorder {
	return m.recorder
}

// ListAll mocks base method
func (m *MockUserCRUD) ListAll() ([]*User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAll")
	ret0, _ := ret[0].([]*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAll indicates an expected call of ListAll
func (mr *MockUserCRUDMockRecorder) ListAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAll", reflect.TypeOf((*MockUserCRUD)(nil).ListAll))
}

// SelectByID mocks base method
func (m *MockUserCRUD) SelectByID(arg0 int64) (*User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectByID", arg0)
	ret0, _ := ret[0].(*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectByID indicates an expected call of SelectByID
func (mr *MockUserCRUDMockRecorder) SelectByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectByID", reflect.TypeOf((*MockUserCRUD)(nil).SelectByID), arg0)
}

// SelectDataByLogin mocks base method
func (m *MockUserCRUD) SelectDataByLogin(arg0 string) (*User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectDataByLogin", arg0)
	ret0, _ := ret[0].(*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectDataByLogin indicates an expected call of SelectDataByLogin
func (mr *MockUserCRUDMockRecorder) SelectDataByLogin(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectDataByLogin", reflect.TypeOf((*MockUserCRUD)(nil).SelectDataByLogin), arg0)
}

// Create mocks base method
func (m *MockUserCRUD) Create(arg0 *User) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockUserCRUDMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserCRUD)(nil).Create), arg0)
}

// Update mocks base method
func (m *MockUserCRUD) Update(arg0 *User) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockUserCRUDMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserCRUD)(nil).Update), arg0)
}

// Delete mocks base method
func (m *MockUserCRUD) Delete(arg0 int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockUserCRUDMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserCRUD)(nil).Delete), arg0)
}
